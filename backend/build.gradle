plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.6-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.flywaydb.flyway' version '8.0.0'
}

group = 'com.mathvault'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
  	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation('io.github.cdimascio:dotenv-java:3.0.0')
  	implementation('me.paulschwarz:spring-dotenv:4.0.0')
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
}

file('.env').readLines().each { line ->
    if (!line.isEmpty() && !line.startsWith("#")) {
        def pos = line.indexOf("=")
        def key = line.substring(0, pos)
        def value = line.substring(pos + 1)

        if (System.getenv(key) == null) {
            project.ext[key] = value
        }
    }
}

flyway {
    url = project.ext['DATABASE_URL']
    user = project.ext['DATABASE_USERNAME']
    password = project.ext['DATABASE_PASSWORD']
    schemas = ['public']
}